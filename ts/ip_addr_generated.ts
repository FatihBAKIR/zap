// automatically generated by the FlatBuffers compiler, do not modify

import { flatbuffers } from "flatbuffers"
/**
 * @constructor
 */
export namespace bb.cloud{
export class IPAddr {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns IPAddr
 */
__init(i:number, bb:flatbuffers.ByteBuffer):IPAddr {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param IPAddr= obj
 * @returns IPAddr
 */
static getRootAsIPAddr(bb:flatbuffers.ByteBuffer, obj?:IPAddr):IPAddr {
  return (obj || new IPAddr).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
gwId():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
addr():string|null
addr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
addr(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startIPAddr(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number gwId
 */
static addGwId(builder:flatbuffers.Builder, gwId:number) {
  builder.addFieldInt32(0, gwId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset addrOffset
 */
static addAddr(builder:flatbuffers.Builder, addrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, addrOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endIPAddr(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishIPAddrBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
};

}
}
