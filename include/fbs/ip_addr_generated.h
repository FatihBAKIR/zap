// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IPADDR_BB_CLOUD_H_
#define FLATBUFFERS_GENERATED_IPADDR_BB_CLOUD_H_

#include "flatbuffers/flatbuffers.h"

namespace zap {
namespace cloud {

struct IPAddr;

inline const flatbuffers::TypeTable *IPAddrTypeTable();

struct IPAddr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return IPAddrTypeTable();
  }
  enum {
    VT_GW_ID = 4,
    VT_ADDR = 6
  };
  uint32_t gw_id() const {
    return GetField<uint32_t>(VT_GW_ID, 0);
  }
  const flatbuffers::String *addr() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_GW_ID) &&
           VerifyOffset(verifier, VT_ADDR) &&
           verifier.VerifyString(addr()) &&
           verifier.EndTable();
  }
};

struct IPAddrBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gw_id(uint32_t gw_id) {
    fbb_.AddElement<uint32_t>(IPAddr::VT_GW_ID, gw_id, 0);
  }
  void add_addr(flatbuffers::Offset<flatbuffers::String> addr) {
    fbb_.AddOffset(IPAddr::VT_ADDR, addr);
  }
  explicit IPAddrBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IPAddrBuilder &operator=(const IPAddrBuilder &);
  flatbuffers::Offset<IPAddr> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IPAddr>(end);
    return o;
  }
};

inline flatbuffers::Offset<IPAddr> CreateIPAddr(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t gw_id = 0,
    flatbuffers::Offset<flatbuffers::String> addr = 0) {
  IPAddrBuilder builder_(_fbb);
  builder_.add_addr(addr);
  builder_.add_gw_id(gw_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<IPAddr> CreateIPAddrDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t gw_id = 0,
    const char *addr = nullptr) {
  return zap::cloud::CreateIPAddr(
      _fbb,
      gw_id,
      addr ? _fbb.CreateString(addr) : 0);
}

inline const flatbuffers::TypeTable *IPAddrTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const zap::cloud::IPAddr *GetIPAddr(const void *buf) {
  return flatbuffers::GetRoot<zap::cloud::IPAddr>(buf);
}

inline const zap::cloud::IPAddr *GetSizePrefixedIPAddr(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<zap::cloud::IPAddr>(buf);
}

inline bool VerifyIPAddrBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<zap::cloud::IPAddr>(nullptr);
}

inline bool VerifySizePrefixedIPAddrBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<zap::cloud::IPAddr>(nullptr);
}

inline void FinishIPAddrBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<zap::cloud::IPAddr> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedIPAddrBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<zap::cloud::IPAddr> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cloud
}  // namespace bb

#endif  // FLATBUFFERS_GENERATED_IPADDR_BB_CLOUD_H_
